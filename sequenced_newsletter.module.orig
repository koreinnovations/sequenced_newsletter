<?php

// $Id$

/**
 * Implementation of hook_help().
 */
function sequenced_newsletter_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#sequenced_newsletter":
      $output = '<p>' . t('Sequenced newsletter module extends Simplenews module with functionality to send sequenced emails. Sequenced newsletters are emails, that user gets in a predefined time frames. The main difference between normal newsletter and sequene newsletter is, that subscribers of latter would not get the same content, even if emails are sent at the same time.') . '</p>';
      $output .= '<p>' . t('Example of a sequenced newsletter is a series of emals, sent to the registred user N days after registration. All N emails are predefined, and every user must get the same email on the first day, second day, ... If some user registered yesterday and another today, they will both get their emails at the same time. The difference is only in content they will get; first user will get email for second day, and second user will get the email for first day.') . '</p>';
      $output .= '<p>' . t('Module is configured on it\'s <a href="@settings">settings page</a>. Emails are sent through cron job; every time when cron runs module checks if it is already time to send emails. Emails are put in Simplenews spool, when necessary. Emails are then sent through Simplenews. Module also generates a, <a href="@list">list of all emails</a> sent to Simplenews spool.', array('@settings' => url('admin/settings/sequenced_newsletter'), '@list' => url('sequenced_newsletter/list'))) . '</p>';
      $output .= '<p>' . t('Order of emails is set regarding to creation date. Nodes (emails) created earlier will be sent before (a king of FIFO priciple).') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function sequenced_newsletter_perm() {
  return array('administer sequenced newsletters');
}

function _sequenced_newsletter_list_letters() {
  $out = "";
  $addresses = db_query("SELECT sid, title, date_spooled, mail FROM {sequenced_newsletter} as s, {node} as n, {simplenews_subscriptions} AS su WHERE s.nid=n.nid and s.sid=su.snid ORDER BY mail, date_spooled DESC");
  $old_mail = "";
  while ($row = db_fetch_array($addresses)) {
    if ($old_mail != $row['mail']) {
      $out .= $old_mail == "" ? "<h2>" . check_plain($row['mail']) . "</h2><ul>" : "</ul>\n<h2>" . check_plain($row['mail']) . "</h2><ul>\n";
      $old_mail = $row['mail'];
    }

    $out .= "<li>" . check_plain($row['title']) . " (" . format_date($row['date_spooled']) . ")</li>\n";
  }

  $out .= "</ul>\n";

  return $out;
}

/**
 * Implementation of hook_menu().
 */
function sequenced_newsletter_menu() {

  $items = array();

  $items['admin/settings/sequenced_newsletter'] = array(
      'title' => t('Sequenced newsletter'),
      'description' => t('Configuration page for Sequenced newsletter module.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sequenced_newsletter_admin'),
      'access arguments' => array('administer sequenced newsletters'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'sequenced_newsletter.admin.inc',
  );

  $items['admin/settings/sequenced_newsletter/add'] = array(
      'title' => t('Sequenced newsletter'),
      'description' => t('Add new sequenced newsletter.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sequenced_newsletter_admin_edit'),
      'access arguments' => array('administer sequenced newsletters'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'sequenced_newsletter.admin.inc',
  );

  $items['admin/settings/sequenced_newsletter/edit/%'] = array(
      'title' => t('Edit sequenced newsletter'),
      'description' => t('Edit given sequenced newsletter.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sequenced_newsletter_admin_edit', 4),
      'access arguments' => array('administer sequenced newsletters'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'sequenced_newsletter.admin.inc',
  );

  $items['admin/settings/sequenced_newsletter/delete/%'] = array(
      'title' => t('Delete sequenced newsletter'),
      'description' => t('Delete given sequenced newsletter.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sequenced_newsletter_admin_delete', 4),
      'access arguments' => array('administer sequenced newsletters'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'sequenced_newsletter.admin.inc',
  );

  $items['admin/settings/sequenced_newsletter/list'] = array(
      'title' => t('List of sent letters'),
      'description' => t('Sequenced module\'s list of sent emails (for debugging purpuses).'),
      'page callback' => '_sequenced_newsletter_list_letters',
      'access arguments' => array('administer sequenced newsletters'),
      'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function sequenced_newsletter_cron() {
  //check if it is time to spool mails
  $intervals[0] = 86400; //intervals
  $intervals[1] = 7 * $intervals[0]; //weekly
  $intervals[2] = $intervals[0] * date_days_in_month(date('Y'), date('m')); //monthly
  $intervals[3] = 300; //intervals
  $intervals[4] = 60; //intervals

  $seq_letters = db_query("SELECT * FROM {sequenced_newsletter_conf} WHERE status=1");

  while ($item = db_fetch_object($seq_letters)) {
    //load vars
    $last_run = $item->last_send;
    $int_type = $item->send_interval;
    $tid = $item->tid;
    //$enabled = $item->status;
    $start_time = $item->start_date;
    $letter_order = $item->sort == 0 ? 'n.nid' : 'n.changed';

    //check what to do
    $interval = $intervals[$int_type];

    if (time() - $last_run > $interval && $start_time < time() && $tid /* && $enabled */) {

      //correct time of this run to be ok
      $time_of_run = $last_run == 0 ? time() : $last_run + $interval;

      //check if we missed one or more full intervals
      while ($time_of_run + $interval < time()) {
        $time_of_run += $interval;
      }

      //get letters
      $lett_array = Array();
      $spool_wait = Array();
      $letters = db_query("SELECT sn.nid FROM {simplenews_newsletters} AS sn INNER JOIN {node} AS n ON n.nid=sn.nid WHERE sn.tid=%d ORDER BY " . $letter_order . " ASC", $tid);
      while ($row = db_fetch_array($letters)) {
        $lett_array[] = $row['nid'];
        $spool_wait[$row['nid']] = Array();
      }

      //get subscribers
      $subs_array = Array();
      $subs = db_query("SELECT s.snid,s.mail FROM {simplenews_snid_tid} AS l,{simplenews_subscriptions} AS s WHERE l.snid=s.snid AND l.tid=%d AND s.activated=1 AND l.status=1", $tid);
      while ($row = db_fetch_array($subs)) {
        $subs_array[] = Array(
            'snid' => $row['snid'],
            'mail' => $row['mail']
        );
      }

      //spool emails
      foreach ($subs_array as $sub) {
        //get last newsletter
        $max = db_query_range("SELECT nid FROM {sequenced_newsletter} WHERE sid=%d AND sqnid=%d ORDER BY date_spooled DESC", $sub['snid'], $item->sqnid, 0, 1);
        $max = db_fetch_array($max);
        $next_nid = $max['nid'] == NULL ? reset($lett_array) : $lett_array[array_search($max['nid'], $lett_array) + 1];

        //remember to send and log
        if ($next_nid) {
          $spool_wait[$next_nid][] = (object) $sub;
          db_query("INSERT INTO {sequenced_newsletter}(sid,sqnid,nid,date_spooled) VALUES('%d','%d','%d','%d')", $sub['snid'], $item->sqnid, $next_nid, $time_of_run);
        }
      }

      //send emails
      module_load_include('inc', 'simplenews', 'includes/simplenews.mail');
      foreach ($spool_wait as $nid => $spool) {
        if (count($spool) > 0) {
          simplenews_send_node($nid, $spool);
        }
      }

      //save this run timestamp
      db_query("UPDATE {sequenced_newsletter_conf} SET last_send=%d WHERE sqnid=%d", $time_of_run, $item->sqnid);
    }
  }
}
